/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.46.0
  Forc version: 0.40.1
  Fuel-Core version: 0.19.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option } from "./common";

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type BytesInput = { buf: RawBytesInput, len: BigNumberish };
export type BytesOutput = { buf: RawBytesOutput, len: BN };
export type RawBytesInput = { ptr: BigNumberish, cap: BigNumberish };
export type RawBytesOutput = { ptr: BN, cap: BN };
export type StringInput = { bytes: BytesInput };
export type StringOutput = { bytes: BytesOutput };

export type Src20AbiConfigurables = {
  OWNER: AddressInput;
};

interface Src20AbiInterface extends Interface {
  functions: {
    _mint: FunctionFragment;
    decimals: FunctionFragment;
    name: FunctionFragment;
    symbol: FunctionFragment;
    total_supply: FunctionFragment;
  };

  encodeFunctionData(functionFragment: '_mint', values: [BigNumberish, AddressInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'decimals', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'name', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'symbol', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'total_supply', values: []): Uint8Array;

  decodeFunctionData(functionFragment: '_mint', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'decimals', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'name', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'symbol', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_supply', data: BytesLike): DecodedValue;
}

export class Src20Abi extends Contract {
  interface: Src20AbiInterface;
  functions: {
    _mint: InvokeFunction<[amount: BigNumberish, recipient: AddressInput], void>;
    decimals: InvokeFunction<[], number>;
    name: InvokeFunction<[], Option<StringOutput>>;
    symbol: InvokeFunction<[], Option<StringOutput>>;
    total_supply: InvokeFunction<[], BN>;
  };
}
